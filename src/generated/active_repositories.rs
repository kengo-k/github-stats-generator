#![allow(clippy::all, warnings)]
pub struct ActiveRepositories;
pub mod active_repositories {
    #![allow(dead_code)]
    use std::result::Result;
    pub const OPERATION_NAME: &str = "ActiveRepositories";
    pub const QUERY : & str = "query ActiveRepositories(\n  $ids: [ID!]!\n  $since: GitTimestamp!\n  $until: GitTimestamp!\n) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Repository {\n      name\n      defaultBranchRef {\n        target {\n          __typename\n          ... on Commit {\n            history(since: $since, until: $until) {\n              totalCount\n            }\n          }\n        }\n      }\n    }\n  }\n}\n" ;
    use super::*;
    use serde::{Deserialize, Serialize};
    #[allow(dead_code)]
    type Boolean = bool;
    #[allow(dead_code)]
    type Float = f64;
    #[allow(dead_code)]
    type Int = i64;
    #[allow(dead_code)]
    type ID = String;
    type GitTimestamp = super::GitTimestamp;
    #[derive(Serialize)]
    pub struct Variables {
        pub ids: Vec<ID>,
        pub since: GitTimestamp,
        pub until: GitTimestamp,
    }
    impl Variables {}
    #[derive(Deserialize)]
    pub struct ResponseData {
        pub nodes: Vec<Option<ActiveRepositoriesNodes>>,
    }
    #[derive(Deserialize)]
    #[serde(tag = "__typename")]
    pub enum ActiveRepositoriesNodes {
        AddedToMergeQueueEvent,
        AddedToProjectEvent,
        App,
        AssignedEvent,
        AutoMergeDisabledEvent,
        AutoMergeEnabledEvent,
        AutoRebaseEnabledEvent,
        AutoSquashEnabledEvent,
        AutomaticBaseChangeFailedEvent,
        AutomaticBaseChangeSucceededEvent,
        BaseRefChangedEvent,
        BaseRefDeletedEvent,
        BaseRefForcePushedEvent,
        Blob,
        Bot,
        BranchProtectionRule,
        BypassForcePushAllowance,
        BypassPullRequestAllowance,
        CWE,
        CheckRun,
        CheckSuite,
        ClosedEvent,
        CodeOfConduct,
        CommentDeletedEvent,
        Commit,
        CommitComment,
        CommitCommentThread,
        Comparison,
        ConnectedEvent,
        ConvertToDraftEvent,
        ConvertedNoteToIssueEvent,
        ConvertedToDiscussionEvent,
        CrossReferencedEvent,
        DemilestonedEvent,
        DeployKey,
        DeployedEvent,
        Deployment,
        DeploymentEnvironmentChangedEvent,
        DeploymentReview,
        DeploymentStatus,
        DisconnectedEvent,
        Discussion,
        DiscussionCategory,
        DiscussionComment,
        DiscussionPoll,
        DiscussionPollOption,
        DraftIssue,
        Enterprise,
        EnterpriseAdministratorInvitation,
        EnterpriseIdentityProvider,
        EnterpriseRepositoryInfo,
        EnterpriseServerInstallation,
        EnterpriseServerUserAccount,
        EnterpriseServerUserAccountEmail,
        EnterpriseServerUserAccountsUpload,
        EnterpriseUserAccount,
        Environment,
        ExternalIdentity,
        Gist,
        GistComment,
        HeadRefDeletedEvent,
        HeadRefForcePushedEvent,
        HeadRefRestoredEvent,
        IpAllowListEntry,
        Issue,
        IssueComment,
        Label,
        LabeledEvent,
        Language,
        License,
        LinkedBranch,
        LockedEvent,
        Mannequin,
        MarkedAsDuplicateEvent,
        MarketplaceCategory,
        MarketplaceListing,
        MembersCanDeleteReposClearAuditEntry,
        MembersCanDeleteReposDisableAuditEntry,
        MembersCanDeleteReposEnableAuditEntry,
        MentionedEvent,
        MergeQueue,
        MergeQueueEntry,
        MergedEvent,
        MigrationSource,
        Milestone,
        MilestonedEvent,
        MovedColumnsInProjectEvent,
        OIDCProvider,
        OauthApplicationCreateAuditEntry,
        OrgAddBillingManagerAuditEntry,
        OrgAddMemberAuditEntry,
        OrgBlockUserAuditEntry,
        OrgConfigDisableCollaboratorsOnlyAuditEntry,
        OrgConfigEnableCollaboratorsOnlyAuditEntry,
        OrgCreateAuditEntry,
        OrgDisableOauthAppRestrictionsAuditEntry,
        OrgDisableSamlAuditEntry,
        OrgDisableTwoFactorRequirementAuditEntry,
        OrgEnableOauthAppRestrictionsAuditEntry,
        OrgEnableSamlAuditEntry,
        OrgEnableTwoFactorRequirementAuditEntry,
        OrgInviteMemberAuditEntry,
        OrgInviteToBusinessAuditEntry,
        OrgOauthAppAccessApprovedAuditEntry,
        OrgOauthAppAccessBlockedAuditEntry,
        OrgOauthAppAccessDeniedAuditEntry,
        OrgOauthAppAccessRequestedAuditEntry,
        OrgOauthAppAccessUnblockedAuditEntry,
        OrgRemoveBillingManagerAuditEntry,
        OrgRemoveMemberAuditEntry,
        OrgRemoveOutsideCollaboratorAuditEntry,
        OrgRestoreMemberAuditEntry,
        OrgUnblockUserAuditEntry,
        OrgUpdateDefaultRepositoryPermissionAuditEntry,
        OrgUpdateMemberAuditEntry,
        OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
        OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
        Organization,
        OrganizationIdentityProvider,
        OrganizationInvitation,
        OrganizationMigration,
        Package,
        PackageFile,
        PackageTag,
        PackageVersion,
        PinnedDiscussion,
        PinnedEvent,
        PinnedIssue,
        PrivateRepositoryForkingDisableAuditEntry,
        PrivateRepositoryForkingEnableAuditEntry,
        Project,
        ProjectCard,
        ProjectColumn,
        ProjectV2,
        ProjectV2Field,
        ProjectV2Item,
        ProjectV2ItemFieldDateValue,
        ProjectV2ItemFieldIterationValue,
        ProjectV2ItemFieldNumberValue,
        ProjectV2ItemFieldSingleSelectValue,
        ProjectV2ItemFieldTextValue,
        ProjectV2IterationField,
        ProjectV2SingleSelectField,
        ProjectV2View,
        ProjectV2Workflow,
        PublicKey,
        PullRequest,
        PullRequestCommit,
        PullRequestCommitCommentThread,
        PullRequestReview,
        PullRequestReviewComment,
        PullRequestReviewThread,
        PullRequestThread,
        Push,
        PushAllowance,
        Reaction,
        ReadyForReviewEvent,
        Ref,
        ReferencedEvent,
        Release,
        ReleaseAsset,
        RemovedFromMergeQueueEvent,
        RemovedFromProjectEvent,
        RenamedTitleEvent,
        ReopenedEvent,
        RepoAccessAuditEntry,
        RepoAddMemberAuditEntry,
        RepoAddTopicAuditEntry,
        RepoArchivedAuditEntry,
        RepoChangeMergeSettingAuditEntry,
        RepoConfigDisableAnonymousGitAccessAuditEntry,
        RepoConfigDisableCollaboratorsOnlyAuditEntry,
        RepoConfigDisableContributorsOnlyAuditEntry,
        RepoConfigDisableSockpuppetDisallowedAuditEntry,
        RepoConfigEnableAnonymousGitAccessAuditEntry,
        RepoConfigEnableCollaboratorsOnlyAuditEntry,
        RepoConfigEnableContributorsOnlyAuditEntry,
        RepoConfigEnableSockpuppetDisallowedAuditEntry,
        RepoConfigLockAnonymousGitAccessAuditEntry,
        RepoConfigUnlockAnonymousGitAccessAuditEntry,
        RepoCreateAuditEntry,
        RepoDestroyAuditEntry,
        RepoRemoveMemberAuditEntry,
        RepoRemoveTopicAuditEntry,
        Repository(ActiveRepositoriesNodesOnRepository),
        RepositoryInvitation,
        RepositoryMigration,
        RepositoryRule,
        RepositoryRuleset,
        RepositoryRulesetBypassActor,
        RepositoryTopic,
        RepositoryVisibilityChangeDisableAuditEntry,
        RepositoryVisibilityChangeEnableAuditEntry,
        RepositoryVulnerabilityAlert,
        ReviewDismissalAllowance,
        ReviewDismissedEvent,
        ReviewRequest,
        ReviewRequestRemovedEvent,
        ReviewRequestedEvent,
        SavedReply,
        SecurityAdvisory,
        SponsorsActivity,
        SponsorsListing,
        SponsorsListingFeaturedItem,
        SponsorsTier,
        Sponsorship,
        SponsorshipNewsletter,
        Status,
        StatusCheckRollup,
        StatusContext,
        SubscribedEvent,
        Tag,
        Team,
        TeamAddMemberAuditEntry,
        TeamAddRepositoryAuditEntry,
        TeamChangeParentTeamAuditEntry,
        TeamDiscussion,
        TeamDiscussionComment,
        TeamRemoveMemberAuditEntry,
        TeamRemoveRepositoryAuditEntry,
        Topic,
        TransferredEvent,
        Tree,
        UnassignedEvent,
        UnlabeledEvent,
        UnlockedEvent,
        UnmarkedAsDuplicateEvent,
        UnpinnedEvent,
        UnsubscribedEvent,
        User,
        UserBlockedEvent,
        UserContentEdit,
        UserStatus,
        VerifiableDomain,
        Workflow,
        WorkflowRun,
        WorkflowRunFile,
    }
    #[derive(Deserialize)]
    pub struct ActiveRepositoriesNodesOnRepository {
        pub name: String,
        #[serde(rename = "defaultBranchRef")]
        pub default_branch_ref: Option<ActiveRepositoriesNodesOnRepositoryDefaultBranchRef>,
    }
    #[derive(Deserialize)]
    pub struct ActiveRepositoriesNodesOnRepositoryDefaultBranchRef {
        pub target: Option<ActiveRepositoriesNodesOnRepositoryDefaultBranchRefTarget>,
    }
    #[derive(Deserialize)]
    #[serde(tag = "__typename")]
    pub enum ActiveRepositoriesNodesOnRepositoryDefaultBranchRefTarget {
        Blob,
        Commit(ActiveRepositoriesNodesOnRepositoryDefaultBranchRefTargetOnCommit),
        Tag,
        Tree,
    }
    #[derive(Deserialize)]
    pub struct ActiveRepositoriesNodesOnRepositoryDefaultBranchRefTargetOnCommit {
        pub history: ActiveRepositoriesNodesOnRepositoryDefaultBranchRefTargetOnCommitHistory,
    }
    #[derive(Deserialize)]
    pub struct ActiveRepositoriesNodesOnRepositoryDefaultBranchRefTargetOnCommitHistory {
        #[serde(rename = "totalCount")]
        pub total_count: Int,
    }
}
impl graphql_client::GraphQLQuery for ActiveRepositories {
    type Variables = active_repositories::Variables;
    type ResponseData = active_repositories::ResponseData;
    fn build_query(variables: Self::Variables) -> ::graphql_client::QueryBody<Self::Variables> {
        graphql_client::QueryBody {
            variables,
            query: active_repositories::QUERY,
            operation_name: active_repositories::OPERATION_NAME,
        }
    }
}
